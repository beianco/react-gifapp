{"version":3,"sources":["components/AddAnime.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddAnime","setAnimes","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","animes","type","value","onChange","target","getGifs","anime","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","image","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","item","ReactDOM","render","document","getElementById"],"mappings":"6LAGaA,EAAW,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAIxB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACG,sBAAMC,SAXY,SAACC,GACnBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,GAAIR,GAAW,SAAAS,GAAM,OAAKP,GAAL,mBAAoBO,OAGxEN,EAAc,KAId,SACG,uBAAOO,KAAK,OAAOC,MAAQT,EAAaU,SAhBpB,SAACP,GACxBF,EAAeE,EAAEQ,OAAOF,a,+BCVjBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,iDAEkCC,UAAUH,GAF5C,+DAGDI,MAAMF,GAHL,cAGdG,EAHc,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAGFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIR,IACTW,MAAK,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBb,QAZtB,kBAgBbM,GAhBa,4CAAH,sDCCPQ,EAAc,SAAC,GAAwB,EAAtBL,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,MAItC,OACG,sBAAKI,UAAU,2CAAf,UACG,qBAAKC,IAAKL,EAAOM,IAAKP,IACtB,qBAAKK,UAAU,YAAf,SACG,6BAAKL,UCNJQ,EAAU,SAAC,GAAe,IAAbpB,EAAY,EAAZA,MAEvB,ECHyB,SAACA,GAE1B,MAA0Bd,mBAAS,CAChCqB,KAAM,GACNc,SAAS,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAZAC,qBAAU,WAGPzB,EAAQC,GAAOyB,MAAM,SAAAC,GAClBH,EAAS,CACNhB,KAAMmB,EACNL,SAAS,SAIf,CAACrB,IAEGsB,EDjB0BK,CAAa3B,GAAjCc,EAAb,EAAQP,KAAac,EAArB,EAAqBA,QAOrB,OACG,qCACG,oBAAIJ,UAAU,UAAd,SAAyBjB,IAExBqB,GAAW,2CAEZ,qBAAKJ,UAAU,YAAf,SAEMH,EAAOL,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aElB3BiB,EAAe,WAGzB,MAA4B1C,mBAAS,CAAC,qBAAtC,mBAAOQ,EAAP,KAAeT,EAAf,KAOA,OACG,qCACG,oBAAIgC,UAAU,OAAd,0BACA,cAAC,EAAD,CAAUhC,UAAWA,IAGlBS,EAAOe,KAAI,SAAAoB,GAAI,OACZ,cAAC,EAAD,CAAS7B,MAAO6B,GAAWA,U,MCf1CC,IAASC,OACN,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0bb06c24.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddAnime = ({ setAnimes }) => {\r\n\r\n   // const [animes, setAnimes] = useState(['Naruto', 'Kimetsu no jaiba', 'Fairy tail', 'Attack on titan']);\r\n\r\n   const [inputValue, setinputValue] = useState('');\r\n\r\n   // cambiamos el value state con un evento\r\n   const handleInputChange = (e) => {\r\n      setinputValue( e.target.value );\r\n   }\r\n   \r\n   const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n\r\n      // confirmamos si el input no esta vacio\r\n      if( inputValue.trim().length > 0 ) setAnimes( animes => [inputValue, ...animes]);\r\n\r\n      // reseteamos el input\r\n      setinputValue('');\r\n   }\r\n\r\n   return (\r\n      <form onSubmit={ handleSubmit }>\r\n         <input type=\"text\" value={ inputValue } onChange={ handleInputChange } />\r\n      </form>\r\n   )\r\n}\r\n\r\nAddAnime.propTypes = {\r\n   setAnimes: PropTypes.func.isRequired\r\n}\r\n\r\n","\r\nexport const getGifs = async (anime) => {\r\n\r\n   const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(anime)}&limit=10&api_key=m2ixS1dodk0KyJCbLgoI5uaKfwMaVhgK`;\r\n   const resp = await fetch(url);\r\n   const { data } = await resp.json();\r\n\r\n   // extraemos las propiedades importantes de la respuesta api\r\n   const gifs = data.map(img => {\r\n      return {\r\n         id: img.id,\r\n         title: img.title,\r\n         url: img.url,\r\n         image: img.images?.downsized_medium.url\r\n      }\r\n   })\r\n\r\n   return gifs;\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, image}) => {\r\n\r\n   // console.log(props);\r\n\r\n   return (\r\n      <div className=\"card animate__animated animate__fadeInUp\">\r\n         <img src={image} alt={title} />\r\n         <div className=\"card-meta\">\r\n            <h2>{title}</h2>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ anime }) => {\r\n\r\n   const { data:images, loading } = useFetchGifs(anime);\r\n\r\n   // useEffect permite ejecutar codigo de manera condicional, de esta forma le decimos a react que ejecute la funcion una sola vez al renderizar el componente\r\n   // useEffect(() => {\r\n   //    getGifs(anime).then(setImages);\r\n   // }, [anime]);\r\n\r\n   return (\r\n      <>\r\n         <h3 className=\"heading\">{anime}</h3>\r\n\r\n         {loading && <p>Loading...</p>}\r\n\r\n         <div className=\"card-grid\">\r\n            {\r\n               images.map(img => (\r\n                  <GifGridItem key={img.id} {...img} />\r\n               ))\r\n            }\r\n         </div>\r\n      </>\r\n   )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (anime) => {\r\n  \r\n   const [state, setState] = useState({\r\n      data: [],\r\n      loading: true\r\n   });\r\n\r\n   // hacemos un use effect para correr la funcion getGifs solo cuando la propiedad anime sea cambiada\r\n   useEffect(() => {\r\n\r\n      // traemos los gifs y usamos el setState para guardarlos\r\n      getGifs(anime).then( imgs => {\r\n         setState({\r\n            data: imgs,\r\n            loading: false\r\n         });\r\n      });\r\n\r\n   }, [anime]);\r\n\r\n   return state; // { data: [], loading: true }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddAnime } from './components/AddAnime';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n   // creamos el state para la lista\r\n   const [animes, setAnimes] = useState(['Kimetsu no jaiba']);\r\n\r\n   // const handleAdd = () => {\r\n   //    // setAnimes([...animes, 'One punch']);\r\n   //    setAnimes( animesCall => [...animesCall, 'One punch'] );\r\n   // }\r\n\r\n   return (\r\n      <>\r\n         <h2 className=\"logo\">GifExpertApp</h2>\r\n         <AddAnime setAnimes={setAnimes} />\r\n         \r\n         {\r\n            animes.map(item => (\r\n               <GifGrid anime={item} key={item} />\r\n            ))\r\n         }\r\n      </>\r\n   )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { GifExpertApp } from './GifExpertApp';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n   <GifExpertApp />,\r\n   document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}